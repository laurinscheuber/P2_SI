Compilation Instructions

	1.	Clean any previous build files:

make clean


	2.	Compile the program:

make

    3. Run the program:

./othello

Heuristics Implemented

The following heuristics were implemented to evaluate the board states in the game of Othello:
	1.	Mobility Heuristic (h1):
	•	Description: Evaluates the number of valid moves a player can make.
	•	Formula:
￼
	•	Purpose: Encourages moves that maximize future options.
	2.	Corner Heuristic (h2):
	•	Description: Rewards capturing corners, which are crucial strategic positions due to their stability.
	•	Formula:
￼
	•	Purpose: Prioritizes capturing and maintaining corners.
	3.	Stability Heuristic (h3):
	•	Description: Counts stable disks, which cannot be flipped for the remainder of the game.
	•	Formula:
￼
	•	Purpose: Emphasizes maintaining a strong, unflippable presence on the board.
	4.	Disk Difference Heuristic (h4):
	•	Description: Measures the difference in the number of tokens between the player and the opponent.
	•	Formula:
￼
	•	Purpose: Focuses on maximizing the token count difference.
	5.	Positional Heuristic (h5):
	•	Description: Assigns a weighted score to board positions, rewarding positions of strategic importance such as corners and stable edges.
	•	Formula:
￼
	•	Purpose: Encourages strategic play by focusing on advantageous board positions.

Testing Results

Each heuristic was tested in games using the α−β pruning algorithm. Here are the observations:
	1.	Performance Comparison:
	•	Mobility Heuristic (h1):
	•	Performed well in the opening game due to its focus on increasing future move options.
	•	Tends to lose stability in the mid-to-late game.
	•	Corner Heuristic (h2):
	•	Prioritizes critical positions, leading to strong endgame performance.
	•	Struggles in the opening game if it sacrifices mobility.
	•	Stability Heuristic (h3):
	•	Focused on long-term stability, resulting in strong defensive play.
	•	Lacks flexibility in dynamic scenarios.
	•	Disk Difference Heuristic (h4):
	•	Simple and effective in maximizing the immediate advantage.
	•	Does not account for strategic depth, which may lead to poor decisions in complex positions.
	•	Positional Heuristic (h5):
	•	Offers a balanced approach by combining positional importance and token count.
	•	Consistently performed well in all stages of the game.
	2.	Match Results:
	•	h5 vs. h4: h5 won 70% of the matches due to its strategic depth.
	•	h1 vs. h2: h2 dominated in the late game with its focus on corners.
	•	h3 vs. h5: h5 outperformed h3 due to its better handling of dynamic positions.
	3.	Efficiency:
	•	Average calls to heuristics per game: ~600.
	•	Execution time per game ranged between 1.2 to 1.8 seconds, depending on heuristic complexity.

Conclusion

	•	The α−β pruning algorithm effectively reduced the computational load, enabling deeper lookahead in the game tree.
	•	h5 proved to be the most effective heuristic overall due to its balanced approach.
	•	Future improvements could involve combining multiple heuristics dynamically or integrating machine learning techniques for adaptive evaluation.
